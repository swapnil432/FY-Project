let jwt,Admin,Property,User;_d37‍.x([["login",()=>login],["getAllProperty",()=>getAllProperty],["verifyProperty",()=>verifyProperty],["getPropertyDocuments",()=>getPropertyDocuments],["getPropertyImages",()=>getPropertyImages],["statusApprove",()=>statusApprove],["statusReject",()=>statusReject],["getAllUsers",()=>getAllUsers],["getCompleteUsers",()=>getCompleteUsers],["verifyUser",()=>verifyUser]]);_d37‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_d37‍.w("../models/admin",[["default",["Admin"],function(v){Admin=v}]]);_d37‍.w("../models/property",[["default",["Property"],function(v){Property=v}]]);_d37‍.w("../models/user",[["default",["User"],function(v){User=v}]]);




const JWT_SECRET = "34513HJKK34IJKBKHN9429GBJUND3JDQLL";

       const login = (req, res) => {
  const { email, password } = req.body;
  Admin.findOne({ email }, (err, user) => {
    if (err || !user) {
      return res.status(400).json({
        error: "User not found",
      });
    }
    const isValidPassword = user.comparePassword(password);
    if (!isValidPassword) {
      return res.status(400).json({ error: "Invalid credentials" });
    }
    const token = jwt.sign({ _id: user._id }, JWT_SECRET, { expiresIn: "1D" });
    return res.status(200).json({
      messsage: "Welcome",
      token: token,
    });
  });
};

// Property

       const getAllProperty = (req, res) => {
  Property.find({}, (err, properties) => {
    if (err || !properties) {
      return res.status(400).json({
        error: "No Properties found",
      });
    }
    return res.status(200).json(properties);
  });
};
       const verifyProperty = (req, res) => {
  const id = req.params.id;
  Property.findOne({ _id: id }, (err, property) => {
    if (err || !property) {
      return res.status(400).json({
        error: "Property not found",
      });
    }
    property.is_verified = true;

    property.save((err, success) => {
      if (err) {
        return res.status(400).json({
          error: err,
        });
      }
      return res.status(200).json({
        message: "Property Verified!",
      });
    });
  });
};
       const getPropertyDocuments = (req, res) => {
  const id = req.params.id;
  Property.findOne({ _id: id }, (err, property) => {
    if (err || !property) {
      return res.status(400).json({
        error: "No Properties found",
      });
    }
    const docs = property.pdf.map(({ destination, filename }) => ({
      path: `${destination}/${filename}`,
    }));

    return res.status(200).json(docs);
  });
};
       const getPropertyImages = (req, res) => {
  const id = req.params.id;
  Property.findOne({ _id: id }, (err, property) => {
    if (err || !property) {
      return res.status(400).json({
        error: "No Properties found",
      });
    }
    const image = property.images.map(({ destination, filename }) => ({
      path: `${destination}/${filename}`,
    }));

    return res.status(200).json(image);
  });
};
       const statusApprove = (req, res) => {
  const id = req.params.id;
  Property.findOne({ _id: id }).exec((err, property) => {
    if (err) {
      return res.status(400).json({
        error: "Property Not Found",
      });
    }
    if (property) {
      property.status = 1;
      property.save((err, updatedProperty) => {
        if (err) {
          return res.status(400).json({
            error: "property update failed",
          });
        }
        return res.status(200).json(updatedProperty);
      });
    }
  });
};
       const statusReject = (req, res) => {
  const id = req.params.id;
  Property.findOne({ _id: id }).exec((err, property) => {
    if (err) {
      return res.status(400).json({
        error: "Property Not Found",
      });
    }
    if (property) {
      property.status = 2;
      property.save((err, updatedProperty) => {
        if (err) {
          return res.status(400).json({
            error: "property update failed",
          });
        }
        return res.status(200).json(updatedProperty);
      });
    }
  });
};

//users
       const getAllUsers = (req, res) => {
  User.find({}, (err, users) => {
    if (err) {
      return res.status(400).json({
        error: "No Users Found",
      });
    }
    return res.status(200).json(users);
  });
};
       const getCompleteUsers = (req, res) => {
  User.find({ is_complete: true }, (err, users) => {
    if (err) {
      return res.status(400).json({
        error: "No Users Found",
      });
    }
    return res.status(200).json(users);
  });
};

       const verifyUser = (req, res) => {
  const id = req.params.id;
  User.findOne({ _id: id }, (err, user) => {
    if (err || !user) {
      return res.status(400).json({
        error: "Users not found",
      });
    }
    user.is_verified = true;

    user.save((err, success) => {
      if (err) {
        return res.status(400).json({
          error: err,
        });
      }
      return res.status(200).json({
        message: "User Verified!",
      });
    });
  });
};
